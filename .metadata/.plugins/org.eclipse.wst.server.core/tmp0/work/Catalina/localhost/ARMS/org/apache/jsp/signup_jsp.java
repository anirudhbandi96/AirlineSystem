/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.6
 * Generated at: 2018-04-01 19:43:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class signup_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\r\n");
      out.write("<title>Customer Signup</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/style2.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<script>\r\n");
      out.write("function validateForm() {\r\n");
      out.write("    var x = document.forms[\"signupUser\"][\"email\"].value;\r\n");
      out.write("    var atpos = x.indexOf(\"@\");\r\n");
      out.write("    var dotpos = x.lastIndexOf(\".\");\r\n");
      out.write("    if (atpos<1 || dotpos<atpos+2 || dotpos+2>=x.length) {\r\n");
      out.write("        alert(\"Not a valid e-mail address\");\r\n");
      out.write("        return false;\r\n");
      out.write("    }\r\n");
      out.write("    var ph = document.forms[\"signupUser\"][\"tel\"].value;\r\n");
      out.write("    var phoneno = /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;\r\n");
      out.write("    if(ph.match(phoneno))\r\n");
      out.write("          {\r\n");
      out.write("        return true;\r\n");
      out.write("          }\r\n");
      out.write("        else\r\n");
      out.write("          {\r\n");
      out.write("          alert(\"Invalid Phone Number\");\r\n");
      out.write("          return false;\r\n");
      out.write("          }\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("<div class=\"login-page2\">\r\n");
      out.write("  <div class=\"form2\">\r\n");
      out.write("  <h1>SIGN UP</h1>\r\n");
      out.write("  </div>\r\n");
      out.write("  </div>\r\n");
      out.write("<div class=\"login-page\">\r\n");
      out.write("  <div class=\"form\">\r\n");
      out.write("    <form name = \"signupUser\" action = \"LoginServlet\" method = \"post\" class=\"login-form-cust\" onsubmit=\"return validateForm();\">\r\n");
      out.write("    \r\n");
      out.write("    Firstname <input type = \"text\" name = \"firstname\" placeholder=\"John\" required/><br><br>\r\n");
      out.write("\tLastname  <input type = \"text\" name = \"lastname\" placeholder=\"Smith\"required /><br><br>\r\n");
      out.write("\tAddress <input type = \"text\" name = \"address\" required /><br><br>\r\n");
      out.write("\tCity <input type = \"text\" name = \"city\" required /><br><br>\r\n");
      out.write("\tStateLine <input type = \"text\" name = \"stateLine\" required /><br><br>\r\n");
      out.write("\tZipcode <input type = \"text\" name = \"zipcode\" required /><br><br>\r\n");
      out.write("\tTelephone <input type = \"text\" name = \"tel\" placeholder=\"(XXX)-XXX-XXXX\" required /><br><br>\r\n");
      out.write("\tCredit Card Number <input type = \"text\" name = \"creditCardNumber\" required /><br><br>\r\n");
      out.write("\tEmail <input type = \"email\" name = \"email\" placeholder=\"xyz@email.com\" required /><br><br>\r\n");
      out.write("\tPassword <input type = \"password\" name = \"password\" required /><br><br>\r\n");
      out.write("\t\r\n");
      out.write("\t<input type = \"hidden\" value = \"actual_signup\" name = \"action\" style=\"background-color: #4CAF50\">\r\n");
      out.write("\t<input type =\"submit\" value = \"Submit\" style=\"background-color: #4CAF50\">\r\n");
      out.write("      \r\n");
      out.write("    </form>\r\n");
      out.write("      \r\n");
      out.write("  </div>\r\n");
      out.write("</div>\r\n");
      out.write("  <script src='http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
